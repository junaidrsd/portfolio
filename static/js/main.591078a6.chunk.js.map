{"version":3,"sources":["components/header/Header.js","components/projects/ProjectCard.js","components/projects/Projects.js","components/Divider.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","Projects","id","title","image","description","useState","show","setShow","useEffect","timer","setTimeout","clearTimeout","src","process","alt","projects","map","project","key","style","border","color","backgroundColor","height","paddingLeft","paddingRight","Divider","Contact","RenderProjects","App","history","createBrowserHistory","basename","path","exact","component","Boolean","window","location","hostname","match","console","log","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4lCAqBeA,G,MAlBA,kBACb,4BAAQC,UAAU,UAChB,yBAAKA,UAAU,QAAf,WAEA,yBAAKA,UAAU,UACb,uBAAGA,UAAU,QAAQC,KAAK,KAA1B,iBAGF,yBAAKD,UAAU,SACb,6BACE,4BACE,4BAAI,uBAAGC,KAAK,YAAR,kB,gBCcCC,G,MAxBE,SAAC,GAAsC,EAApCC,GAAqC,IAAjCC,EAAgC,EAAhCA,MAAoBC,GAAY,EAAzBC,YAAyB,EAAZD,OAAY,EAChCE,oBAAS,GADuB,mBACjDC,EADiD,KAC3CC,EAD2C,KAUtD,OAPAC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvBH,GAAQ,KACP,GACH,OAAO,kBAAMI,aAAaF,MACzB,IAGD,yBAAKX,UAAU,WACb,uBAAGA,UAAU,gBAAgBC,KAAK,KAChC,yBAAKD,UAAU,wBACb,yBAAKA,UAAW,kBAAoBQ,EAAO,yBAA2B,IAAKM,IAAG,UAAKC,aAAL,YAA+BV,GAASW,IAAKZ,KAE7H,yBAAKJ,UAAU,kBACb,uBAAGC,KAAK,KAAKG,QCPRF,EAVE,kBACf,yBAAKF,UAAU,YAEXiB,EAASC,KAAI,SAAAC,GAAO,OAClB,kBAAC,EAAD,CAAaC,IAAKD,EAAQhB,GAAIA,GAAIgB,EAAQhB,GAAIE,MAAOc,EAAQd,MAAOD,MAAOe,EAAQf,MAAOE,YAAaa,EAAQb,mBCNjHe,EAAQ,CACZC,OAAQ,OACRC,MAAO,OACPC,gBAAiB,OACjBC,OAAQ,MACRC,YAAa,OACbC,aAAc,QAODC,EAJC,kBACd,yBAAKP,MAAOA,K,aCAd,SAASQ,IACP,OAAQ,wCAGV,IAAMC,EAAiB,kBACrB,oCACE,yBAAK9B,UAAU,aAAa,6CAC5B,yBAAKA,UAAU,QACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SAqBS+B,MAhBf,WACE,OACE,yBAAK/B,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAQgC,QAASC,IAAsBC,SAAUnB,cAC/C,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,KAAK,IAAIC,OAAK,EAACC,UAAWP,IACjC,kBAAC,IAAD,CAAOK,KAAK,WAAWE,UAAWR,IAClC,kBAAC,IAAD,CAAOM,KAAK,IAAIE,UAAWR,IAC3B,kBAAC,IAAD,CAAOQ,UAAW,kBAAO,sDCvBfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,QAAQC,IAAI,eAAgB7B,cAC5B8B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLb,QAAQa,MAAMA,EAAMC,c","file":"static/js/main.591078a6.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.scss';\n\nconst Header = () => (\n  <header className='header'>\n    <div className=\"left\" >Contact</div>\n    \n    <div className=\"center\">\n      <a className=\"title\" href=\"/\">Saima Junaid</a>\n    </div>\n    \n    <div className=\"right\" >\n      <nav>\n        <ul>\n          <li><a href=\"/contact\">Contact</a></li>\n        </ul>\n      </nav>\n    </div>\n  </header>\n)\n\nexport default Header;","import React, { useState, useEffect } from 'react';\nimport './ProjectCard.scss';\n\n\nconst Projects = ({ id, title, description, image }) => {\n  let [show, setShow] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setShow(true);\n    }, 0);\n    return () => clearTimeout(timer);\n  }, []);\n  \n  return (\n    <div className=\"project\">\n      <a className=\"project__link\" href=\"/\" >\n        <div className=\"project__img-wrapper\">\n          <img className={\"project__image\" + (show ? ' project__animate-show' : '')} src={`${process.env.PUBLIC_URL}/${image}`} alt={title} />\n        </div>\n        <div className=\"project__title\">\n          <a href=\"/\">{title}</a>\n        </div>\n      </a>\n    </div>\n  )\n}\n\nexport default Projects;","import React from 'react';\nimport projects from '../../shared/projects.json';\nimport ProjectCard from './ProjectCard';\n\nconst Projects = () => (\n  <div className=\"projects\">\n    {\n      projects.map(project =>\n        <ProjectCard key={project.id} id={project.id} image={project.image} title={project.title} description={project.description} />\n      )\n    }\n  </div>\n)\n\nexport default Projects;\n","import React from 'react';\n\nconst style = {\n  border: 'none',\n  color: '#bbb',\n  backgroundColor: '#bbb',\n  height: '1px',\n  paddingLeft: '17px',\n  paddingRight: '17px'\n};\n\nconst Divider = () => (\n  <div style={style} />\n)\n\nexport default Divider;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport Header from './components/header/Header';\nimport Projects from './components/projects/Projects';\nimport Divider from './components/Divider';\nimport { createBrowserHistory } from 'history';\nimport './App.scss';\n\nfunction Contact() {\n  return (<div>Contact</div>)\n}\n\nconst RenderProjects = () => (\n  <>\n    <div className=\"app__text\" ><h3>Representing</h3></div>\n    <div className=\"page\">\n      <Projects />\n      <Divider />\n    </div>\n  </>\n);\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <Router history={createBrowserHistory} basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route path=\"/\" exact component={RenderProjects} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/\" component={Contact} />\n          <Route component={() => (<div>404 Not found </div>)} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.scss';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\nconsole.log('public url: ', process.env.PUBLIC_URL)\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}